substitutions:
  # Phases of the Voice Assistant
  voice_assist_idle_phase_id: '1'
  voice_assist_waiting_for_command_phase_id: '2'
  voice_assist_listening_for_command_phase_id: '3'
  voice_assist_thinking_phase_id: '4'
  voice_assist_replying_phase_id: '5'
  voice_assist_not_ready_phase_id: '10'
  voice_assist_error_phase_id: '11'
  hidden_ssid: "false"

esphome:
  name: home-assistant-voice
  friendly_name: Home Assistant Voice
  name_add_mac_suffix: true
  min_version: 2025.2.0
  on_boot:
    priority: 375
    then:
      - script.execute: control_leds
      - delay: 1s
      - switch.turn_on:
          id: internal_speaker_amp
      - if:
          condition:
            binary_sensor.is_on: hardware_mute_switch
          then:
            - switch.template.publish:
                id: master_mute_switch
                state: ON
      - delay: 10min
      - if:
          condition:
            lambda: |-
              return id(init_in_progress);
          then:
            - lambda: |-
                id(init_in_progress) = false;
            - script.execute: control_leds

esp32:
  board: esp32-s3-devkitc-1
  variant: esp32s3
  flash_size: 16MB
  framework:
    type: esp-idf
    version: recommended
    sdkconfig_options:
      CONFIG_ESP32S3_DEFAULT_CPU_FREQ_240: "y"
      CONFIG_ESP32S3_DATA_CACHE_64KB: "y"
      CONFIG_ESP32S3_DATA_CACHE_LINE_64B: "y"
      CONFIG_ESP32S3_INSTRUCTION_CACHE_32KB: "y"
      CONFIG_BT_ALLOCATION_FROM_SPIRAM_FIRST: "y"
      CONFIG_BT_BLE_DYNAMIC_ENV_MEMORY: "y"
      CONFIG_MBEDTLS_EXTERNAL_MEM_ALLOC: "y"
      CONFIG_MBEDTLS_SSL_PROTO_TLS1_3: "y"

wifi:
  id: wifi_id
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "Ammu_Voice"
    password: "5XiT0ABYKuHT"
  fast_connect: ${hidden_ssid}
  on_connect:
    - lambda: |-
        id(improv_ble_in_progress) = false;
    - script.execute: control_leds
  on_disconnect:
    - script.execute: control_leds

logger:
  level: DEBUG
  logs:
    sensor: WARN

api:
  encryption:
    key: "zBJwpJ57tfMifufNDS6onwuLxJpquV63PwO5Z4cVktM="
  id: api_id
  on_client_connected:
    - script.execute: control_leds
  on_client_disconnected:
    - script.execute: control_leds

ota:
  - platform: esphome
    id: ota_esphome

i2c:
  - id: internal_i2c
    sda: GPIO5
    scl: GPIO6
    frequency: 400kHz

psram:
  mode: octal
  speed: 80MHz

globals:
  - id: global_led_animation_index
    type: int
    restore_value: no
    initial_value: "0"
  - id: init_in_progress
    type: bool
    restore_value: no
    initial_value: "true"
  - id: improv_ble_in_progress
    type: bool
    restore_value: no
    initial_value: "false"
  - id: voice_assistant_phase
    type: int
    restore_value: no
    initial_value: ${voice_assist_not_ready_phase_id}
  - id: dial_touched
    type: bool
    restore_value: no
    initial_value: "false"
  - id: color_changed
    type: bool
    restore_value: no
    initial_value: "false"
  - id: jack_plugged_recently
    type: bool
    restore_value: no
    initial_value: "false"
  - id: jack_unplugged_recently
    type: bool
    restore_value: no
    initial_value: "false"
  - id: first_active_timer
    type: voice_assistant::Timer
    restore_value: false
  - id: is_timer_active
    type: bool
    restore_value: false
    initial_value: "false"
  - id: factory_reset_requested
    type: bool
    restore_value: no
    initial_value: "false"

switch:
  - platform: template
    id: master_mute_switch
    restore_mode: RESTORE_DEFAULT_OFF
    icon: "mdi:microphone-off"
    name: Mute
    entity_category: config
    turn_on_action:
      - if:
          condition:
            binary_sensor.is_off: hardware_mute_switch
          then:
            - switch.template.publish:
                id: master_mute_switch
                state: ON
    turn_off_action:
      - if:
          condition:
            binary_sensor.is_off: hardware_mute_switch
          then:
            - switch.template.publish:
                id: master_mute_switch
                state: OFF
    on_turn_on:
      - script.execute: control_leds
    on_turn_off:
      - script.execute: control_leds

  - platform: template
    id: wake_sound
    name: "Wake sound"
    icon: "mdi:bullhorn"
    entity_category: config
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON

  - platform: template
    id: timer_ringing
    optimistic: true
    internal: true
    restore_mode: ALWAYS_OFF
    on_turn_off:
      - lambda: |-
          id(stop).disable();
      - script.execute: disable_repeat
      - if:
          condition:
            media_player.is_announcing
          then:
            - media_player.stop:
                announcement: true
      - mixer_speaker.apply_ducking:
          id: media_mixing_input
          decibel_reduction: 0
          duration: 1.0s
      - script.execute: control_leds
    on_turn_on:
      - mixer_speaker.apply_ducking:
          id: media_mixing_input
          decibel_reduction: 20
          duration: 0.0s
      - lambda: |-
          id(stop).enable();
      - script.execute: ring_timer
      - script.execute: control_leds
      - delay: 15min
      - switch.turn_off:
          id: timer_ringing

  - platform: gpio
    pin: GPIO47
    id: internal_speaker_amp
    name: "Internal speaker amp"
    entity_category: config
    restore_mode: ALWAYS_OFF
    internal: true

binary_sensor:
  - platform: gpio
    id: center_button
    pin:
      number: GPIO0
      inverted: true
    on_press:
      - script.execute: control_leds
    on_release:
      - script.execute: control_leds
      - if:
          condition:
            lambda: |-
              return id(factory_reset_requested);
          then:
            - button.press: factory_reset_button
    on_multi_click:
      - timing:
          - ON for at most 1s
          - OFF for at least 0.25s
        then:
          - if:
              condition:
                lambda: |-
                  return !id(init_in_progress) && !id(color_changed);
              then:
                - if:
                    condition:
                      switch.is_on: timer_ringing
                    then:
                      - switch.turn_off: timer_ringing
                    else:
                      - if:
                          condition:
                            media_player.is_announcing
                          then:
                            - media_player.stop:
                                announcement: true
                          else:
                            - if:
                                condition:
                                  voice_assistant.is_running
                                then:
                                  - voice_assistant.stop
                                else:
                                  - if:
                                      condition:
                                        media_player.is_playing
                                      then:
                                        - media_player.pause
                                      else:
                                        - if:
                                            condition:
                                              and:
                                                - switch.is_off: master_mute_switch
                                                - not: voice_assistant.is_running
                                            then:
                                              - script.execute:
                                                  id: play_sound
                                                  priority: true
                                                  sound_file: !lambda |-
                                                    return id(center_button_press_sound);
                                              - delay: 300ms
                                              - voice_assistant.start
      - timing:
          - ON for at most 1s
          - OFF for at most 0.25s
          - ON for at most 1s
          - OFF for at least 0.25s
        then:
          - if:
              condition:
                lambda: |-
                  return !id(init_in_progress) && !id(color_changed);
              then:
                - script.execute:
                    id: play_sound
                    priority: false
                    sound_file: !lambda |-
                      return id(center_button_double_press_sound);
                - event.trigger:
                    id: button_press_event
                    event_type: "double_press"
      - timing:
          - ON for at most 1s
          - OFF for at most 0.25s
          - ON for at most 1s
          - OFF for at most 0.25s
          - ON for at most 1s
          - OFF for at least 0.25s
        then:
          - if:
              condition:
                lambda: |-
                  return !id(init_in_progress) && !id(color_changed);
              then:
                - script.execute:
                    id: play_sound
                    priority: false
                    sound_file: !lambda |-
                      return id(center_button_triple_press_sound);
                - event.trigger:
                    id: button_press_event
                    event_type: "triple_press"
      - timing:
          - ON for at least 1s
        then:
          - if:
              condition:
                lambda: |-
                  return !id(init_in_progress) && !id(color_changed);
              then:
                - script.execute:
                    id: play_sound
                    priority: false
                    sound_file: !lambda |-
                      return id(center_button_long_press_sound);
                - light.turn_off: voice_assistant_leds
                - event.trigger:
                    id: button_press_event
                    event_type: "long_press"

  - platform: gpio
    id: hardware_mute_switch
    internal: true
    pin:
      number: GPIO3
    on_press:
      - script.execute:
          id: play_sound
          priority: false
          sound_file: !lambda |-
            return id(mute_switch_on_sound);
      - switch.template.publish:
          id: master_mute_switch
          state: ON
    on_release:
      - script.execute:
          id: play_sound
          priority: false
          sound_file: !lambda |-
            return id(mute_switch_off_sound);
      - switch.template.publish:
          id: master_mute_switch
          state: OFF

  - platform: gpio
    id: jack_plugged
    filters:
      - delayed_on: 200ms
      - delayed_off: 200ms
    pin:
      number: GPIO17
    on_press:
      - lambda: |-
          id(jack_plugged_recently) = true;
      - script.execute: control_leds
      - delay: 200ms
      - script.execute:
          id: play_sound
          priority: false
          sound_file: !lambda |-
            return id(jack_connected_sound);
      - delay: 800ms
      - lambda: |-
          id(jack_plugged_recently) = false;
      - script.execute: control_leds
    on_release:
      - lambda: |-
          id(jack_unplugged_recently) = true;
      - script.execute: control_leds
      - delay: 200ms
      - script.execute:
          id: play_sound
          priority: false
          sound_file: !lambda |-
            return id(jack_disconnected_sound);
      - delay: 800ms
      - lambda: |-
          id(jack_unplugged_recently) = false;
      - script.execute: control_leds

light:
  - platform: esp32_rmt_led_strip
    id: leds_internal
    pin: GPIO21
    chipset: WS2812
    max_refresh_rate: 15ms
    num_leds: 12
    rgb_order: GRB
    rmt_symbols: 192
    default_transition_length: 0ms
    power_supply: led_power

  - platform: partition
    id: voice_assistant_leds
    internal: true
    default_transition_length: 0ms
    segments:
      - id: leds_internal
        from: 7
        to: 11
      - id: leds_internal
        from: 0
        to: 6
    effects:
      - addressable_lambda:
          name: "Waiting for Command"
          update_interval: 100ms
          lambda: |-
            auto light_color = id(led_ring).current_values;
            Color color(light_color.get_red() * 255,
                        light_color.get_green() * 255,
                        light_color.get_blue() * 255);
            for (int i = 0; i < 12; i++) {
              if (i == id(global_led_animation_index) % 12) {
                it[i] = color;
              } else if (i == (id(global_led_animation_index) + 11) % 12) {
                it[i] = color * 192;
              } else if (i == (id(global_led_animation_index) + 10) % 12) {
                it[i] = color * 128;
              } else if (i == (id(global_led_animation_index) + 6) % 12) {
                it[i] = color;
              } else if (i == (id(global_led_animation_index) + 5) % 12) {
                it[i] = color * 192;
              } else if (i == (id(global_led_animation_index) + 4) % 12) {
                it[i] = color * 128;
              } else {
                it[i] = Color::BLACK;
              }
            }
            id(global_led_animation_index) = (id(global_led_animation_index) + 1) % 12;
      - addressable_lambda:
          name: "Listening For Command"
          update_interval: 50ms
          lambda: |-
            auto light_color = id(led_ring).current_values;
            Color color(light_color.get_red() * 255,
                        light_color.get_green() * 255,
                        light_color.get_blue() * 255);
            for (int i = 0; i < 12; i++) {
              if (i == id(global_led_animation_index) % 12) {
                it[i] = color;
              } else if (i == (id(global_led_animation_index) + 11) % 12) {
                it[i] = color * 192;
              } else if (i == (id(global_led_animation_index) + 10) % 12) {
                it[i] = color * 128;
              } else if (i == (id(global_led_animation_index) + 6) % 12) {
                it[i] = color;
              } else if (i == (id(global_led_animation_index) + 5) % 12) {
                it[i] = color * 192;
              } else if (i == (id(global_led_animation_index) + 4) % 12) {
                it[i] = color * 128;
              } else {
                it[i] = Color::BLACK;
              }
            }
            id(global_led_animation_index) = (id(global_led_animation_index) + 1) % 12;
      - addressable_lambda:
          name: "Thinking"
          update_interval: 10ms
          lambda: |-
            static uint8_t brightness_step = 0;
            static bool brightness_decreasing = true;
            static uint8_t brightness_step_number = 10;
            if (initial_run) {
              brightness_step = 0;
              brightness_decreasing = true;
            }
            auto light_color = id(led_ring).current_values;
            Color color(light_color.get_red() * 255,
                        light_color.get_green() * 255,
                        light_color.get_blue() * 255);
            for (int i = 0; i < 12; i++) {
              if (i == id(global_led_animation_index) % 12) {
                it[i] = color * uint8_t(255 / brightness_step_number * (brightness_step_number - brightness_step));
              } else if (i == (id(global_led_animation_index) + 6) % 12) {
                it[i] = color * uint8_t(255 / brightness_step_number * (brightness_step_number - brightness_step));
              } else {
                it[i] = Color::BLACK;
              }
            }
            if (brightness_decreasing) {
              brightness_step++;
            } else {
              brightness_step--;
            }
            if (brightness_step == 0 || brightness_step == brightness_step_number) {
              brightness_decreasing = !brightness_decreasing;
            }
      - addressable_lambda:
          name: "Replying"
          update_interval: 50ms
          lambda: |-
            id(global_led_animation_index) = (12 + id(global_led_animation_index) - 1) % 12;
            auto light_color = id(led_ring).current_values;
            Color color(light_color.get_red() * 255,
                        light_color.get_green() * 255,
                        light_color.get_blue() * 255);
            for (int i = 0; i < 12; i++) {
              if (i == (id(global_led_animation_index)) % 12) {
                it[i] = color;
              } else if (i == (id(global_led_animation_index) + 1) % 12) {
                it[i] = color * 192;
              } else if (i == (id(global_led_animation_index) + 2) % 12) {
                it[i] = color * 128;
              } else if (i == (id(global_led_animation_index) + 6) % 12) {
                it[i] = color;
              } else if (i == (id(global_led_animation_index) + 7) % 12) {
                it[i] = color * 192;
              } else if (i == (id(global_led_animation_index) + 8) % 12) {
                it[i] = color * 128;
              } else {
                it[i] = Color::BLACK;
              }
            }
      - addressable_lambda:
          name: "Muted or Silent"
          update_interval: 16ms
          lambda: |-
            static int8_t index = 0;
            Color muted_color(255, 0, 0);
            auto light_color = id(led_ring).current_values;
            Color color(light_color.get_red() * 255,
                        light_color.get_green() * 255,
                        light_color.get_blue() * 255);
            for (int i = 0; i < 12; i++) {
              if (light_color.get_state()) {
                it[i] = color;
              } else {
                it[i] = Color::BLACK;
              }
            }
            if (id(master_mute_switch).state) {
              it[2] = Color::BLACK;
              it[3] = muted_color;
              it[4] = Color::BLACK;
              it[8] = Color::BLACK;
              it[9] = muted_color;
              it[10] = Color::BLACK;
            }
            if (id(external_media_player).volume == 0.0f || id(external_media_player).is_muted()) {
              it[5] = Color::BLACK;
              it[6] = muted_color;
              it[7] = Color::BLACK;
            }
      - addressable_lambda:
          name: "Volume Display"
          update_interval: 50ms
          lambda: |-
            auto light_color = id(led_ring).current_values;
            Color color(light_color.get_red() * 255,
                        light_color.get_green() * 255,
                        light_color.get_blue() * 255);
            Color silenced_color(255, 0, 0);
            auto volume_ratio = 12.0f * id(external_media_player).volume;
            for (int i = 0; i < 12; i++) {
              if (i <= volume_ratio) {
                it[(6+i)%12] = color * min(255.0f * (volume_ratio - i), 255.0f);
              } else {
                it[(6+i)%12] = Color::BLACK;
              }
            }
            if (id(external_media_player).volume == 0.0f) {
              it[6] = silenced_color;
            }
      - addressable_lambda:
          name: "Center Button Touched"
          update_interval: 16ms
          lambda: |-
            if (initial_run) {
              auto led_ring_cv = id(led_ring).current_values;
              auto va_leds_call = id(voice_assistant_leds).make_call();
              va_leds_call.from_light_color_values(led_ring_cv);
              va_leds_call.set_brightness(min(max(id(led_ring).current_values.get_brightness(), 0.2f) + 0.1f, 1.0f));
              va_leds_call.set_state(true);
              va_leds_call.perform();
            }
            auto light_color = id(voice_assistant_leds).current_values;
            Color color(light_color.get_red() * 255,
                        light_color.get_green() * 255,
                        light_color.get_blue() * 255);
            for (int i = 0; i < 12; i++) {
              it[i] = color;
            }
      - addressable_twinkle:
          name: "Twinkle"
          twinkle_probability: 50%
      - addressable_lambda:
          name: "Error"
          update_interval: 10ms
          lambda: |-
            static uint8_t brightness_step = 0;
            static bool brightness_decreasing = true;
            static uint8_t brightness_step_number = 10;
            if (initial_run) {
              brightness_step = 0;
              brightness_decreasing = true;
            }
            Color error_color(255, 0, 0);
            for (int i = 0; i < 12; i++) {
              it[i] = error_color * uint8_t(255 / brightness_step_number * (brightness_step_number - brightness_step));
            }
            if (brightness_decreasing) {
              brightness_step++;
            } else {
              brightness_step--;
            }
            if (brightness_step == 0 || brightness_step == brightness_step_number) {
              brightness_decreasing = !brightness_decreasing;
            }
      - addressable_lambda:
          name: "Timer Ring"
          update_interval: 10ms
          lambda: |-
            static uint8_t brightness_step = 0;
            static bool brightness_decreasing = true;
            static uint8_t brightness_step_number = 10;
            if (initial_run) {
              brightness_step = 0;
              brightness_decreasing = true;
            }
            auto light_color = id(led_ring).current_values;
            Color color(light_color.get_red() * 255,
                        light_color.get_green() * 255,
                        light_color.get_blue() * 255);
            Color muted_color(255, 0, 0);
            for (int i = 0; i < 12; i++) {
              it[i] = color * uint8_t(255 / brightness_step_number * (brightness_step_number - brightness_step));
            }
            if (id(master_mute_switch).state) {
              it[3] = muted_color;
              it[9] = muted_color;
            }
            if (brightness_decreasing) {
              brightness_step++;
            } else {
              brightness_step--;
            }
            if (brightness_step == 0 || brightness_step == brightness_step_number) {
              brightness_decreasing = !brightness_decreasing;
            }
      - addressable_lambda:
          name: "Timer Tick"
          update_interval: 100ms
          lambda: |-
            auto light_color = id(led_ring).current_values;
            Color color(light_color.get_red() * 255,
                        light_color.get_green() * 255,
                        light_color.get_blue() * 255);
            Color muted_color(255, 0, 0);
            auto timer_ratio = 12.0f * id(first_active_timer).seconds_left / max(id(first_active_timer).total_seconds, static_cast<uint32_t>(1));
            uint8_t last_led_on = static_cast<uint8_t>(ceil(timer_ratio)) - 1;
            for (int i = 0; i < 12; i++) {
              float brightness_dip = (i == id(global_led_animation_index) % 12 && i != last_led_on) ? 0.9f : 1.0f;
              if (i <= timer_ratio) {
                it[i] = color * min(255.0f * brightness_dip * (timer_ratio - i), 255.0f * brightness_dip);
              } else {
                it[i] = Color::BLACK;
              }
            }
            if (id(master_mute_switch).state) {
              it[2] = Color::BLACK;
              it[3] = muted_color;
              it[4] = Color::BLACK;
              it[8] = Color::BLACK;
              it[9] = muted_color;
              it[10] = Color::BLACK;
            }
            id(global_led_animation_index) = (12 + id(global_led_animation_index) - 1) % 12;
      - addressable_rainbow:
          name: "Rainbow"
          width: 12
      - addressable_lambda:
          name: "Tick"
          update_interval: 333ms
          lambda: |-
            static uint8_t index = 0;
            Color color(255, 0, 0);
            if (initial_run) {
              index = 0;
            }
            for (int i = 0; i < 12; i++) {
              if (i <= index) {
                it[i] = Color::BLACK;
              } else {
                it[i] = color;
              }
            }
            index = (index + 1) % 12;
      - addressable_lambda:
          name: "Factory Reset Coming Up"
          update_interval: 1s
          lambda: |-
            static uint8_t index = 0;
            Color color(255, 0, 0);
            if (initial_run) {
              index = 0;
            }
            for (int i = 0; i < 12; i++) {
              if (i <= index) {
                it[i] = color;
              } else {
                it[i] = Color::BLACK;
              }
            }
            index = (index + 1) % 12;
      - addressable_lambda:
          name: "Jack Plugged"
          update_interval: 40ms
          lambda: |-
            static uint8_t index = 0;
            if (initial_run) {
              index = 0;
            }
            auto light_color = id(led_ring).current_values;
            Color color(light_color.get_red() * 255,
                        light_color.get_green() * 255,
                        light_color.get_blue() * 255);
            if (index <= 6) {
              for (int i = 0; i < 12; i++) {
                if (i == index) {
                  it[i] = color;
                } else if (i == (12 - index) % 12) {
                  it[i] = color;
                } else {
                  it[i] = Color::BLACK;
                }
              }
            }
            index = (index + 1);
      - addressable_lambda:
          name: "Jack Unplugged"
          update_interval: 40ms
          lambda: |-
            static uint8_t index = 0;
            if (initial_run) {
              index = 0;
            }
            auto light_color = id(led_ring).current_values;
            Color color(light_color.get_red() * 255,
                        light_color.get_green() * 255,
                        light_color.get_blue() * 255);
            if (index <= 6) {
              for (int i = 0; i < 12; i++) {
                if (i == 6 - index) {
                  it[i] = color;
                } else if (i == (6 + index) % 12) {
                  it[i] = color;
                } else {
                  it[i] = Color::BLACK;
                }
              }
            }
            index = (index + 1);

  - platform: partition
    id: led_ring
    name: LED Ring
    entity_category: config
    icon: "mdi:circle-outline"
    default_transition_length: 0ms
    restore_mode: RESTORE_DEFAULT_OFF
    initial_state:
      color_mode: rgb
      brightness: 66%
      red: 9.4%
      green: 73.3%
      blue: 94.9%
    segments:
      - id: leds_internal
        from: 7
        to: 11
      - id: leds_internal
        from: 0
        to: 6

power_supply:
  - id: led_power
    pin: GPIO45

sensor:
  - platform: rotary_encoder
    id: dial
    pin_a: GPIO16
    pin_b: GPIO18
    resolution: 2
    on_clockwise:
      - lambda: |-
          id(dial_touched) = true;
      - if:
          condition:
            binary_sensor.is_off: center_button
          then:
            - script.execute:
                id: control_volume
                increase_volume: true
          else:
            - script.execute:
                id: control_hue
                increase_hue: true
    on_anticlockwise:
      - lambda: |-
          id(dial_touched) = true;
      - if:
          condition:
            binary_sensor.is_off: center_button
          then:
            - script.execute:
                id: control_volume
                increase_volume: false
          else:
            - script.execute:
                id: control_hue
                increase_hue: false

event:
  - platform: template
    id: button_press_event
    name: "Button press"
    icon: mdi:button-pointer
    device_class: button
    event_types:
      - double_press
      - triple_press
      - long_press
      - easter_egg_press

script:
  - id: control_leds
    then:
      - lambda: |-
          id(check_if_timers_active).execute();
          if (id(is_timer_active)) {
            id(fetch_first_active_timer).execute();
          }
          if (id(improv_ble_in_progress)) {
            id(control_leds_improv_ble_state).execute();
          } else if (id(init_in_progress)) {
            id(control_leds_init_state).execute();
          } else if (!id(wifi_id).is_connected() || !id(api_id).is_connected()) {
            id(control_leds_no_ha_connection_state).execute();
          } else if (id(center_button).state) {
            id(control_leds_center_button_touched).execute();
          } else if (id(jack_plugged_recently)) {
            id(control_leds_jack_plugged_recently).execute();
          } else if (id(jack_unplugged_recently)) {
            id(control_leds_jack_unplugged_recently).execute();
          } else if (id(dial_touched)) {
            id(control_leds_dial_touched).execute();
          } else if (id(timer_ringing).state) {
            id(control_leds_timer_ringing).execute();
          } else if (id(voice_assistant_phase) == ${voice_assist_waiting_for_command_phase_id}) {
            id(control_leds_voice_assistant_waiting_for_command_phase).execute();
          } else if (id(voice_assistant_phase) == ${voice_assist_listening_for_command_phase_id}) {
            id(control_leds_voice_assistant_listening_for_command_phase).execute();
          } else if (id(voice_assistant_phase) == ${voice_assist_thinking_phase_id}) {
            id(control_leds_voice_assistant_thinking_phase).execute();
          } else if (id(voice_assistant_phase) == ${voice_assist_replying_phase_id}) {
            id(control_leds_voice_assistant_replying_phase).execute();
          } else if (id(voice_assistant_phase) == ${voice_assist_error_phase_id}) {
            id(control_leds_voice_assistant_error_phase).execute();
          } else if (id(voice_assistant_phase) == ${voice_assist_not_ready_phase_id}) {
            id(control_leds_voice_assistant_not_ready_phase).execute();
          } else if (id(is_timer_active)) {
            id(control_leds_timer_ticking).execute();
          } else if (id(master_mute_switch).state) {
            id(control_leds_muted_or_silent).execute();
          } else if (id(external_media_player).volume == 0.0f || id(external_media_player).is_muted()) {
            id(control_leds_muted_or_silent).execute();
          } else if (id(voice_assistant_phase) == ${voice_assist_idle_phase_id}) {
            id(control_leds_voice_assistant_idle_phase).execute();
          }
  - id: control_leds_improv_ble_state
    then:
      - light.turn_on:
          brightness: 66%
          red: 100%
          green: 89%
          blue: 71%
          id: voice_assistant_leds
          effect: "Twinkle"
  - id: control_leds_init_state
    then:
      - if:
          condition:
            wifi.connected: {}
          then:
            - light.turn_on:
                brightness: 66%
                red: 9.4%
                green: 73.3%
                blue: 94.9%
                id: voice_assistant_leds
                effect: "Twinkle"
          else:
            - light.turn_on:
                brightness: 66%
                red: 100%
                green: 89%
                blue: 71%
                id: voice_assistant_leds
                effect: "none"
  - id: control_leds_no_ha_connection_state
    then:
      - light.turn_on:
          brightness: 66%
          red: 1
          green: 0
          blue: 0
          id: voice_assistant_leds
          effect: "Twinkle"
  - id: control_leds_voice_assistant_idle_phase
    then:
      - light.turn_off: voice_assistant_leds
      - if:
          condition:
            light.is_on: led_ring
          then:
            - light.turn_on: led_ring
  - id: control_leds_voice_assistant_waiting_for_command_phase
    then:
      - light.turn_on:
          brightness: !lambda return max(id(led_ring).current_values.get_brightness(), 0.2f);
          id: voice_assistant_leds
          effect: "Waiting for Command"
  - id: control_leds_voice_assistant_listening_for_command_phase
    then:
      - light.turn_on:
          brightness: !lambda return max(id(led_ring).current_values.get_brightness(), 0.2f);
          id: voice_assistant_leds
          effect: "Listening For Command"
  - id: control_leds_voice_assistant_thinking_phase
    then:
      - light.turn_on:
          brightness: !lambda return max(id(led_ring).current_values.get_brightness(), 0.2f);
          id: voice_assistant_leds
          effect: "Thinking"
  - id: control_leds_voice_assistant_replying_phase
    then:
      - light.turn_on:
          brightness: !lambda return max(id(led_ring).current_values.get_brightness(), 0.2f);
          id: voice_assistant_leds
          effect: "Replying"
  - id: control_leds_voice_assistant_error_phase
    then:
      - light.turn_on:
          brightness: !lambda return min(max(id(led_ring).current_values.get_brightness(), 0.2f) + 0.1f, 1.0f);
          red: 1
          green: 0
          blue: 0
          id: voice_assistant_leds
          effect: "Error"
  - id: control_leds_muted_or_silent
    then:
      - light.turn_on:
          brightness: !lambda return max(id(led_ring).current_values.get_brightness(), 0.2f);
          id: voice_assistant_leds
          effect: "Muted or Silent"
  - id: control_leds_voice_assistant_not_ready_phase
    then:
      - light.turn_on:
          brightness: 66%
          red: 1
          green: 0
          blue: 0
          id: voice_assistant_leds
          effect: "Twinkle"
  - id: control_leds_dial_touched
    then:
      - light.turn_on:
          brightness: !lambda return max(id(led_ring).current_values.get_brightness(), 0.2f);
          id: voice_assistant_leds
          effect: "Volume Display"
  - id: control_leds_jack_unplugged_recently
    then:
      - light.turn_on:
          brightness: !lambda return max(id(led_ring).current_values.get_brightness(), 0.2f);
          id: voice_assistant_leds
          effect: "Jack Unplugged"
  - id: control_leds_jack_plugged_recently
    then:
      - light.turn_on:
          brightness: !lambda return max(id(led_ring).current_values.get_brightness(), 0.2f);
          id: voice_assistant_leds
          effect: "Jack Plugged"
  - id: control_leds_center_button_touched
    then:
      - light.turn_on:
          brightness: !lambda return min(max(id(led_ring).current_values.get_brightness(), 0.2f) + 0.1f, 1.0f);
          id: voice_assistant_leds
          effect: "Center Button Touched"
  - id: control_leds_timer_ringing
    then:
      - light.turn_on:
          brightness: !lambda return min(max(id(led_ring).current_values.get_brightness(), 0.2f) + 0.1f, 1.0f);
          id: voice_assistant_leds
          effect: "Timer Ring"
  - id: control_leds_timer_ticking
    then:
      - light.turn_on:
          brightness: !lambda return max(id(led_ring).current_values.get_brightness(), 0.2f);
          id: voice_assistant_leds
          effect: "Timer tick"
  - id: control_volume
    mode: restart
    parameters:
      increase_volume: bool
    then:
      - delay: 16ms
      - if:
          condition:
            lambda: |-
              return increase_volume;
          then:
            - media_player.volume_up:
                id: external_media_player
          else:
            - media_player.volume_down:
                id: external_media_player
      - script.execute: control_leds
      - delay: 1s
      - lambda: |-
          id(dial_touched) = false;
      - sensor.rotary_encoder.set_value:
          id: dial
          value: 0
      - script.execute: control_leds
  - id: control_hue
    mode: restart
    parameters:
      increase_hue: bool
    then:
      - delay: 16ms
      - if:
          condition:
            lambda: |-
              return (abs(int(id(dial).state)) > 3 || id(color_changed));
          then:
            - lambda: |
                id(color_changed) = true;
                auto light_color = id(voice_assistant_leds).current_values;
                int hue = 0;
                float saturation = 0;
                float value = 0;
                rgb_to_hsv(light_color.get_red(),
                           light_color.get_green(),
                           light_color.get_blue(),
                           hue,
                           saturation,
                           value);
                if (increase_hue) {
                  hue = (hue + 10) % 360;
                } else {
                  hue = (hue + 350) % 360;
                }
                if (saturation < 0.05) {
                  saturation = 1;
                }
                float red = 0;
                float green = 0;
                float blue = 0;
                hsv_to_rgb(hue,
                           saturation,
                           value,
                           red,
                           green,
                           blue);
                id(voice_assistant_leds).make_call().set_rgb(red, green, blue).perform();
      - wait_until:
          binary_sensor.is_off: center_button
      - lambda: |
          id(dial_touched) = false;
          auto led_ring_call = id(led_ring).make_call();
          auto va_leds_cv = id(voice_assistant_leds).current_values;
          led_ring_call.from_light_color_values(va_leds_cv);
          led_ring_call.set_brightness(id(led_ring).current_values.get_brightness());
          led_ring_call.set_state(id(led_ring).current_values.is_on());
          led_ring_call.perform();
      - sensor.rotary_encoder.set_value:
          id: dial
          value: 0
      - script.execute: control_leds
      - delay: 500ms
      - lambda: |
          id(color_changed) = false;
  - id: ring_timer
    then:
      - script.execute: enable_repeat_one
      - script.execute:
          id: play_sound
          priority: true
          sound_file: !lambda return id(timer_finished_sound);
  - id: enable_repeat_one
    then:
      - lambda: |-
          id(external_media_player)
            ->make_call()
            .set_command(media_player::MediaPlayerCommand::MEDIA_PLAYER_COMMAND_REPEAT_ONE)
            .set_announcement(true)
            .perform();
          id(external_media_player)
            ->set_playlist_delay_ms(speaker::AudioPipelineType::ANNOUNCEMENT, 500);
  - id: disable_repeat
    then:
      - lambda: |-
          id(external_media_player)
            ->make_call()
            .set_command(media_player::MediaPlayerCommand::MEDIA_PLAYER_COMMAND_REPEAT_OFF)
            .set_announcement(true)
            .perform();
          id(external_media_player)
            ->set_playlist_delay_ms(speaker::AudioPipelineType::ANNOUNCEMENT, 0);
  - id: play_sound
    parameters:
      priority: bool
      sound_file: "audio::AudioFile*"
    then:
      - lambda: |-
          if (priority) {
            id(external_media_player)
              ->make_call()
              .set_command(media_player::MediaPlayerCommand::MEDIA_PLAYER_COMMAND_STOP)
              .set_announcement(true)
              .perform();
          }
          if ((id(external_media_player).state != media_player::MediaPlayerState::MEDIA_PLAYER_STATE_ANNOUNCING) || priority) {
            id(external_media_player)
              ->play_file(sound_file, true, false);
          }
  - id: fetch_first_active_timer
    then:
      - lambda: |-
          const auto timers = id(va).get_timers();
          auto output_timer = timers.begin()->second;
          for (auto &iterable_timer : timers) {
            if (iterable_timer.second.is_active && iterable_timer.second.seconds_left <= output_timer.seconds_left) {
              output_timer = iterable_timer.second;
            }
          }
          id(first_active_timer) = output_timer;
  - id: check_if_timers_active
    then:
      - lambda: |-
          const auto timers = id(va).get_timers();
          bool output = false;
          if (timers.size() > 0) {
            for (auto &iterable_timer : timers) {
              if (iterable_timer.second.is_active) {
                output = true;
              }
            }
          }
          id(is_timer_active) = output;
  - id: activate_stop_word_if_tts_step_is_long
    then:
      - delay: 1s
      - lambda: |-
          id(stop).enable();
  - id: handle_voice_assistant_end
    then:
      - if:
          condition:
            switch.is_off: master_mute_switch
          then:
            - voice_assistant.start_continuous: {}
          else:
            - voice_assistant.stop: {}

i2s_audio:
  - id: i2s_output
    i2s_lrclk_pin:
      number: GPIO7
    i2s_bclk_pin:
      number: GPIO8
  - id: i2s_input
    i2s_lrclk_pin:
      number: GPIO14
    i2s_bclk_pin:
      number: GPIO13

microphone:
  - platform: nabu_microphone
    i2s_din_pin: GPIO15
    adc_type: external
    pdm: false
    sample_rate: 16000
    bits_per_sample: 32bit
    i2s_mode: secondary
    i2s_audio_id: i2s_input
    channel_0:
      id: asr_mic
      amplify_shift: 0
    channel_1:
      id: comm_mic
      amplify_shift: 2

speaker:
  - platform: i2s_audio
    id: i2s_audio_speaker
    sample_rate: 48000
    i2s_mode: secondary
    i2s_dout_pin: GPIO10
    bits_per_sample: 32bit
    i2s_audio_id: i2s_output
    dac_type: external
    channel: stereo
    timeout: never
    buffer_duration: 100ms
    audio_dac: aic3204_dac
  - platform: mixer
    id: mixing_speaker
    output_speaker: i2s_audio_speaker
    num_channels: 2
    source_speakers:
      - id: announcement_mixing_input
        timeout: never
      - id: media_mixing_input
        timeout: never
  - platform: resampler
    id: announcement_resampling_speaker
    output_speaker: announcement_mixing_input
    sample_rate: 48000
    bits_per_sample: 16
  - platform: resampler
    id: media_resampling_speaker
    output_speaker: media_mixing_input
    sample_rate: 48000
    bits_per_sample: 16

media_player:
  - platform: speaker
    id: external_media_player
    name: Media Player
    internal: False
    volume_increment: 0.05
    volume_min: 0.4
    volume_max: 0.85
    announcement_pipeline:
      speaker: announcement_resampling_speaker
      format: FLAC
      num_channels: 1
      sample_rate: 48000
    media_pipeline:
      speaker: media_resampling_speaker
      format: FLAC
      num_channels: 2
      sample_rate: 48000
    on_mute:
      - script.execute: control_leds
    on_unmute:
      - script.execute: control_leds
    on_volume:
      - script.execute: control_leds
    on_announcement:
      - mixer_speaker.apply_ducking:
          id: media_mixing_input
          decibel_reduction: 20
          duration: 0.0s
    on_state:
      if:
        condition:
          and:
            - switch.is_off:
                id: timer_ringing
            - not: voice_assistant.is_running
            - not: media_player.is_announcing
        then:
          - mixer_speaker.apply_ducking:
              id: media_mixing_input
              decibel_reduction: 0
              duration: 1.0s
    files:
      - id: center_button_press_sound
        file: https://github.com/esphome/home-assistant-voice-pe/raw/dev/sounds/center_button_press.flac
      - id: center_button_double_press_sound
        file: https://github.com/esphome/home-assistant-voice-pe/raw/dev/sounds/center_button_double_press.flac
      - id: center_button_triple_press_sound
        file: https://github.com/esphome/home-assistant-voice-pe/raw/dev/sounds/center_button_triple_press.flac
      - id: center_button_long_press_sound
        file: https://github.com/esphome/home-assistant-voice-pe/raw/dev/sounds/center_button_long_press.flac
      - id: factory_reset_initiated_sound
        file: https://github.com/esphome/home-assistant-voice-pe/raw/dev/sounds/factory_reset_initiated.mp3
      - id: factory_reset_cancelled_sound
        file: https://github.com/esphome/home-assistant-voice-pe/raw/dev/sounds/factory_reset_cancelled.mp3
      - id: factory_reset_confirmed_sound
        file: https://github.com/esphome/home-assistant-voice-pe/raw/dev/sounds/factory_reset_confirmed.mp3
      - id: jack_connected_sound
        file: https://github.com/esphome/home-assistant-voice-pe/raw/dev/sounds/jack_connected.flac
      - id: jack_disconnected_sound
        file: https://github.com/esphome/home-assistant-voice-pe/raw/dev/sounds/jack_disconnected.flac
      - id: mute_switch_on_sound
        file: https://github.com/esphome/home-assistant-voice-pe/raw/dev/sounds/mute_switch_on.flac
      - id: mute_switch_off_sound
        file: https://github.com/esphome/home-assistant-voice-pe/raw/dev/sounds/mute_switch_off.flac
      - id: timer_finished_sound
        file: https://github.com/esphome/home-assistant-voice-pe/raw/dev/sounds/timer_finished.flac
      - id: wake_word_triggered_sound
        file: https://github.com/kiranvenom1209/ammuai/raw/main/custom_sounds/parayuchetta.flac
      - id: easter_egg_tick_sound
        file: https://github.com/esphome/home-assistant-voice-pe/raw/dev/sounds/easter_egg_tick.mp3
      - id: easter_egg_tada_sound
        file: https://github.com/esphome/home-assistant-voice-pe/raw/dev/sounds/easter_egg_tada.mp3

voice_kit:
  i2c_id: internal_i2c
  reset_pin: GPIO4
  firmware:
    url: https://github.com/esphome/voice-kit-xmos-firmware/releases/download/v1.3.1/ffva_v1.3.1_upgrade.bin
    version: "1.3.1"
    md5: 964635c5bf125529dab14a2472a15401

external_components:
  - source:
      type: git
      url: https://github.com/esphome/home-assistant-voice-pe
      ref: dev
    components:
      - micro_wake_word
      - microphone
      - nabu_microphone
      - voice_assistant
      - voice_kit
    refresh: 0s

audio_dac:
  - platform: aic3204
    id: aic3204_dac
    i2c_id: internal_i2c

micro_wake_word:
  id: mww
  microphone: comm_mic
  models:
    - model: https://github.com/kahrendt/microWakeWord/releases/download/okay_nabu_20241226.3/okay_nabu.json
      id: okay_nabu
      internal: False
    - model: hey_jarvis
      id: hey_jarvis
    - model: hey_mycroft
      id: hey_mycroft
    - model: https://github.com/kahrendt/microWakeWord/releases/download/stop/stop.json
      id: stop
      internal: True
    



voice_assistant:
  id: va
  # Use asr_mic (channel_0) for speech-to-text
  microphone: asr_mic
  media_player: external_media_player
  micro_wake_word: mww
  use_wake_word: true
  noise_suppression_level: 0
  auto_gain: "0 dbfs"
  volume_multiplier: 1
  on_client_connected:
    - lambda: |-
        id(init_in_progress) = false;
    - micro_wake_word.start: {}
    - voice_assistant.start_continuous: {}
    - lambda: |-
        id(voice_assistant_phase) = ${voice_assist_idle_phase_id};
    - script.execute: control_leds
  on_client_disconnected:
    - voice_assistant.stop: {}
    - lambda: |-
        id(voice_assistant_phase) = ${voice_assist_not_ready_phase_id};
    - script.execute: control_leds
  on_error:
    - if:
        condition:
          and:
            - lambda: |-
                return !id(init_in_progress);
            - lambda: |-
                return code != "duplicate_wake_up_detected";
            - lambda: |-
                return code != "stt-no-text-recognized";
        then:
          - lambda: |-
              id(voice_assistant_phase) = ${voice_assist_error_phase_id};
          - script.execute: control_leds
  on_start:
    - mixer_speaker.apply_ducking:
        id: media_mixing_input
        decibel_reduction: 20
        duration: 0.0s
  on_listening:
    - lambda: |-
        id(voice_assistant_phase) = ${voice_assist_waiting_for_command_phase_id};
    - script.execute: control_leds
  on_stt_vad_start:
    - lambda: |-
        id(voice_assistant_phase) = ${voice_assist_listening_for_command_phase_id};
    - script.execute: control_leds
  on_stt_vad_end:
    - lambda: |-
        id(voice_assistant_phase) = ${voice_assist_thinking_phase_id};
    - script.execute: control_leds
  on_tts_start:
    - lambda: |-
        id(voice_assistant_phase) = ${voice_assist_replying_phase_id};
    - script.execute: control_leds
    - script.execute: activate_stop_word_if_tts_step_is_long
  on_end:
    - wait_until:
        not:
          voice_assistant.is_running:
    - mixer_speaker.apply_ducking:
        id: media_mixing_input
        decibel_reduction: 0
        duration: 1.0s
    - script.stop: activate_stop_word_if_tts_step_is_long
    - if:
        condition:
          switch.is_off: timer_ringing
        then:
          - lambda: |-
              id(stop).disable();
    - if:
        condition:
          lambda: |-
              return id(voice_assistant_phase) == ${voice_assist_error_phase_id};
        then:
          - delay: 1s
    - lambda: |-
        id(voice_assistant_phase) = ${voice_assist_idle_phase_id};
    - script.execute: control_leds
    - script.execute: handle_voice_assistant_end
  on_timer_finished:
    - switch.turn_on:
        id: timer_ringing
  on_timer_started:
    - script.execute: control_leds
  on_timer_cancelled:
    - script.execute: control_leds
  on_timer_updated:
    - script.execute: control_leds
  on_timer_tick:
    - script.execute: control_leds

button:
  - platform: factory_reset
    id: factory_reset_button
    name: "Factory Reset"
    entity_category: diagnostic
    internal: true
  - platform: restart
    id: restart_button
    name: "Restart"
    entity_category: config
    disabled_by_default: true
    icon: "mdi:restart"

debug:
  update_interval: 5s
